---
// import fetchURLMetadata from '@utils/fetchURLMetadata';
import getURLMetadata from '@utils/getURLMetadata';
import type { LinkData } from '@utils/getURLMetadata';

export interface Props {
    title?: string;
    description?: string;
    icon?: string;
    author?: string;
    link: string;
    thumbnail?: string;
    publisher?: string;
}

const {
    title: propTitle,
    description: propDescription,
    icon: propIcon,
    author: propAuthor,
    link: propLink,
    thumbnail: propThumbnail,
    publisher: propPublisher,
} = Astro.props;

let linkData: LinkData = {
    title: '',
    description: '',
    icon: '',
    author: '',
    link: propLink, // Ensure link is initialized
    thumbnail: '',
    publisher: '',
};

const missingProps = ['title', 'description', 'icon', 'author', 'thumbnail', 'publisher'].filter(
    () => !propTitle || !propDescription || !propIcon || !propAuthor || !propThumbnail || !propPublisher
);

if (missingProps.length > 0) {
    try {
        const fetchedData = await getURLMetadata(propLink);
        missingProps.forEach((prop) => {
            if (!propTitle && prop === 'title') linkData.title = fetchedData.title;
            if (!propDescription && prop === 'description') linkData.description = fetchedData.description;
            if (!propIcon && prop === 'icon') linkData.icon = fetchedData.icon;
            if (!propAuthor && prop === 'author') linkData.author = fetchedData.author;
            if (!propThumbnail && prop === 'thumbnail') linkData.thumbnail = fetchedData.thumbnail;
            if (!propPublisher && prop === 'publisher') linkData.publisher = fetchedData.publisher;
        });
    } catch (error) {
        console.warn('Failed to fetch metadata for link', propLink, error);
    }
}
---

<figure class="kg-card kg-bookmark-card">
    <a class="kg-bookmark-container" href={propLink}
        ><div class="kg-bookmark-content">
            <div class="kg-bookmark-title">{linkData.title || propTitle}</div>
            <div class="kg-bookmark-description">{linkData.description || propDescription}</div>
            <div class="kg-bookmark-metadata">
                <img class="kg-bookmark-icon" src={linkData.icon || propIcon} alt="Link icon" />
                {
                    (linkData.author || propAuthor) && (
                        <span class="kg-bookmark-author">{linkData.author || propAuthor}</span>
                    )
                }
                {
                    (linkData.publisher || propPublisher) && (
                        <span class="kg-bookmark-publisher">{linkData.publisher || propPublisher}</span>
                    )
                }
            </div>
        </div>
        {
            (linkData.thumbnail || propThumbnail) && (
                <div class="kg-bookmark-thumbnail">
                    <img src={linkData.thumbnail || propThumbnail} alt="Link thumbnail" />
                </div>
            )
        }
    </a>
</figure>

<style>
    .kg-card {
        @extend %font-sans;
    }

    .kg-card:not(.kg-callout-card) {
        font-size: 1rem;
    }

    /* Add extra margin before/after any cards,
except for when immediately preceeded by a heading */
    .post-body :not(.kg-card):not([id]) + .kg-card {
        margin-top: 6vmin;
    }
    .post-body .kg-card + :not(.kg-card) {
        margin-top: 6vmin;
    }

    .kg-bookmark-card,
    .kg-bookmark-card * {
        box-sizing: border-box;
    }

    .kg-bookmark-card,
    .kg-bookmark-publisher {
        position: relative;
        /* width: 100%; */
    }

    .kg-bookmark-card a.kg-bookmark-container,
    .kg-bookmark-card a.kg-bookmark-container:hover {
        display: flex;
        background: var(--bookmark-background-color);
        text-decoration: none;
        border-radius: 6px;
        border: 1px solid var(--bookmark-border-color);
        overflow: hidden;
        color: var(--bookmark-text-color);
    }

    .kg-bookmark-content {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        flex-basis: 100%;
        align-items: flex-start;
        justify-content: flex-start;
        padding: 20px;
        overflow: hidden;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell',
            'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
    }

    .kg-bookmark-title {
        font-size: 15px;
        line-height: 1.4em;
        font-weight: 600;
    }

    .kg-bookmark-description {
        display: -webkit-box;
        font-size: 14px;
        line-height: 1.5em;
        margin-top: 3px;
        font-weight: 400;
        max-height: 44px;
        overflow-y: hidden;
        opacity: 0.7;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .kg-bookmark-metadata {
        display: flex;
        align-items: center;
        margin-top: 22px;
        width: 100%;
        font-size: 14px;
        font-weight: 500;
        white-space: nowrap;
    }

    .kg-bookmark-metadata > *:not(img) {
        opacity: 0.7;
    }

    .kg-bookmark-icon {
        width: 20px;
        height: 20px;
        margin-right: 6px;
    }

    .kg-bookmark-author,
    .kg-bookmark-publisher {
        display: inline;
    }

    .kg-bookmark-publisher {
        text-overflow: ellipsis;
        overflow: hidden;
        max-width: 240px;
        white-space: nowrap;
        display: block;
        line-height: 1.65em;
    }

    .kg-bookmark-metadata > span:nth-of-type(2) {
        font-weight: 400;
    }

    .kg-bookmark-metadata > span:nth-of-type(2):before {
        content: 'â€¢';
        margin: 0 6px;
    }

    .kg-bookmark-metadata > span:last-of-type {
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .kg-bookmark-thumbnail {
        position: relative;
        flex-grow: 1;
        min-width: 33%;
    }

    .kg-bookmark-thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover; /* or contain */
        position: absolute;
        top: 0;
        left: 0;
        border-radius: 0 2px 2px 0;
    }
</style>

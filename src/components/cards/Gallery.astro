---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

export interface Props {
    images: ImageMetadata[];
    maxImages?: number;
    caption?: string;
}

const { images, caption = '' } = Astro.props;
const MAX_IMG_PER_ROW = 3;

const createImageRows = (images: ImageMetadata[], maxImagesPerRow: number) => {
    const maxImages = Math.min(images.length, 9);
    const rows: ImageMetadata[][] = [];

    for (let i = 0; i < maxImages; i += maxImagesPerRow) {
        rows.push(images.slice(i, Math.min(i + maxImagesPerRow, maxImages)));
    }

    // Balance last two rows if needed
    if (rows.length > 1) {
        const lastTwo = rows.slice(-2).flat();
        if (lastTwo.length % 2 !== 0) {
            const midPoint = Math.ceil(lastTwo.length / 2);
            rows.splice(-2, 2, lastTwo.slice(0, midPoint), lastTwo.slice(midPoint));
        }
    }

    return rows;
};

const imageRows = createImageRows(images, MAX_IMG_PER_ROW);

function calculateFlexStyle(image: ImageMetadata) {
    if (image.width && image.height) {
        const ratio = image.width / image.height;
        return `flex: ${ratio} 1 0%;`;
    }
    return '';
}
---

<figure class={`kg-card kg-gallery-card kg-width-wide ${caption ? 'kg-card-hascaption' : ''}`}>
    <div class="kg-gallery-container">
        {
            imageRows.map((row) => (
                <div class="kg-gallery-row">
                    {row.map((image: ImageMetadata) => (
                        <div class="kg-gallery-image" style={calculateFlexStyle(image)}>
                            <Image
                                {...(typeof image === 'string' ? { inferSize: true, src: image } : { src: image })}
                                alt=""
                                class="medium-zoom-image simply-zoom"
                                widths={[720, 1200]}
                                sizes="(min-width: 720px) 720px, (min-width: 1200px) 1200px"
                            />
                        </div>
                    ))}
                </div>
            ))
        }
    </div>
    <figcaption><p dir="ltr"><span style="white-space: pre-wrap;">{caption}</span></p></figcaption>
</figure>

<style>
    .kg-gallery-card,
    .kg-gallery-card * {
        box-sizing: border-box;
    }

    /* Add extra margin before/after any cards,
except for when immediately preceeded by a heading */
    .post-body :not(.kg-card):not([id]) + .kg-card {
        margin-top: 6vmin;
        margin-bottom: 0;
    }

    .post-body .kg-card + :not(.kg-card) {
        margin-top: 6vmin;
        margin-bottom: 0;
    }

    /* This keeps small embeds centered */
    .kg-embed-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    /* This keeps small iamges centered */
    .kg-image-card img {
        margin: auto;
    }

    .kg-gallery-card,
    .kg-image-card {
        --gap: 0.6rem;
    }

    .kg-image-card:not(.kg-card-hascaption) + .kg-image-card,
    .kg-image-card:not(.kg-card-hascaption) + .kg-gallery-card,
    .kg-gallery-card:not(.kg-card-hascaption) + .kg-image-card,
    .kg-gallery-card:not(.kg-card-hascaption) + .kg-gallery-card {
        margin-top: var(--gap);
    }

    .kg-gallery-container {
        position: relative;
    }

    .kg-gallery-row {
        display: flex;
        flex-direction: row;
        justify-content: center;
    }

    .kg-gallery-image img {
        display: block;
        margin: 0;
        width: 100%;
        height: 100%;
    }

    .kg-gallery-row:not(:first-of-type) {
        margin: var(--gap) 0 0;
    }

    .kg-gallery-image:not(:first-of-type) {
        margin: 0 0 0 var(--gap);
    }

    @media (max-width: 600px) {
        .kg-gallery-card,
        .kg-image-card {
            --gap: 0.3rem;
        }
    }

    .kg-gallery-card {
        /* position: absolute; */
        left: 0;
        right: 0;
        width: 50vw;
        margin-left: calc(-25vw + 50%);
    }
</style>

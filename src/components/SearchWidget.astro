---
import { t } from '@utils/use-lang';
import { Icon } from 'astro-icon/components';

type Props = Record<string, never>; // eslint-disable-line @typescript-eslint/no-unused-vars
---

<span
    role="button"
    aria-label="Toggle Search"
    class="js-modal-button godo-tracking button is-white mr-2"
    data-target="modal-search"
    aria-haspopup="true"
    data-event-category="Header"
    data-event-action="Search"
    data-event-label="Click"
    data-event-non-interaction="true"
>
    <Icon name="fa6-solid:magnifying-glass" class="icon" />
</span>
<div id="modal-search" class="js-modal modal search fixed inset-0 z-50 flex flex-col flex-wrap items-center">
    {/* {!-- Bg --}} */}
    <div class="bg-modal js-modal-close absolute inset-0 bg-opacity-60"></div>

    {/* {!-- Close --} */}
    <div class="button is-dark is-circle js-modal-close z-3 absolute" style={{ top: `5px`, right: `5px` }}>
        <Icon name="fa6-solid:xmark" class="icon" />
    </div>

    <div class="modal-content z-2 pt-vw6 relative w-full max-w-2xl px-5 pb-5">
        <div class="search-wrap bg-blank rounded-md shadow-sm">
            {/* {!-- search form --} */}
            <form class="search-form flex w-full items-center px-3 text-base">
                <Icon name="fa6-solid:magnifying-glass" class="icon" />
                <input
                    id="search-field"
                    class="is-medium w-full"
                    type="text"
                    placeholder={`${t(`Search`)}...`}
                    aria-label="Search box"
                />
            </form>
            {/* {!-- show a message to the user if there is no post --} */}
            <span class="js-search-message search-message hidden p-2 text-sm leading-none text-gray-500"
                >{t(`No results found`)}</span
            >
            {/* {!-- Search results --} */}
            <div id="search-results" class="search-results mx-auto w-full leading-none"></div>
        </div>
        {/* {!-- showing the function keys --} */}
        <div class="mt-2 hidden justify-end text-xs leading-none text-white opacity-80 md:flex">
            <div class="">
                <span class="bg-orange inline-block rounded p-1">↑</span>&nbsp;<span
                    class="bg-orange inline-block rounded p-1">↓</span
                >&nbsp;{t(`Navigate up/down`)}
            </div>
            <div class="ml-3">
                <span class="bg-orange inline-block rounded p-1">Enter</span>&nbsp;{t(`Go to article`)}
            </div>
            <div class="ml-3">
                <span class="bg-orange inline-block rounded p-1">Esc</span>&nbsp;{t(`Close search`)}
            </div>
        </div>
    </div>
</div>

<script is:inline define:vars={{ scriptUrl: `/pagefind/pagefind.js` }}>
    async function loadPagefind() {
        const pagefind = await import(scriptUrl);
        await pagefind.options({
            excerptLength: 20,
            highlightParam: 'highlight',
        });
        pagefind.init();
        window.pagefind = pagefind;
        pagefind.search(''); // speed up the first search
    }
    document.addEventListener('astro:after-swap', loadPagefind);
    loadPagefind();
</script>

<script>
    interface SearchResult {
        sub_results: {
            url: string;
            title: string;
            excerpt: string;
        }[];
    }

    interface Pagefind {
        debouncedSearch: (keyword: string) => Promise<{ results: { data: () => Promise<SearchResult> }[] }>;
    }

    declare global {
        interface Window {
            pagefind?: Pagefind;
        }
    }

    class SearchModule {
        private $body: HTMLElement;
        private $input: HTMLInputElement;
        private $results: HTMLElement;
        private $searchMessage: HTMLElement;
        private searchResultsHeight: { outer: number; scroll: number } = { outer: 0, scroll: 0 };
        private classIsActive: string = 'is-active';

        constructor() {
            this.$body = document.body;
            this.$input = document.querySelector('#search-field') as HTMLInputElement;
            this.$results = document.querySelector('#search-results') as HTMLElement;
            this.$searchMessage = document.querySelector('.js-search-message') as HTMLElement;

            this.initEventListeners();
            this.initModalFunctionality();
        }

        private initEventListeners(): void {
            this.$input.addEventListener('input', this.handleInput.bind(this));
            this.$body.addEventListener('keydown', this.handleKeydown.bind(this));

            // Prevent form submission on Enter key
            this.$input.closest('form')?.addEventListener('submit', (e) => e.preventDefault());

            document.querySelector('span[data-target=modal-search]')?.classList.remove('hidden');
        }

        private initModalFunctionality(): void {
            const $modalButtons = document.querySelectorAll('.js-modal-button');
            const $modalCloses = document.querySelectorAll('.js-modal-close');

            $modalButtons.forEach(($el) =>
                $el.addEventListener('click', () => this.openModal($el.getAttribute('data-target')))
            );
            $modalCloses.forEach((el) => el.addEventListener('click', () => this.closeModals()));

            document.addEventListener('keydown', (event: KeyboardEvent) => {
                if (event.key === 'Escape') {
                    this.closeModals();
                }
            });

            document.addEventListener('astro:after-swap', () => this.closeModals());
        }

        private openModal(target: string | null): void {
            if (!target) return;

            this.$body.classList.remove('has-menu');
            const $target = document.getElementById(target);
            if (!$target) return;

            document.documentElement.classList.add('overflow-hidden');
            $target.classList.add('is-active');

            if (target === 'modal-search') {
                this.$input.focus();
            }
        }

        private closeModals(): void {
            document.documentElement.classList.remove('overflow-hidden');
            document.querySelectorAll('.js-modal').forEach(($el) => $el.classList.remove('is-active'));
        }

        private async handleInput(): Promise<void> {
            const query = this.$input.value;
            if (query) {
                const results = await this.search(query);
                this.displaySearch(results);
            } else {
                this.$results.innerHTML = '';
                this.$searchMessage.classList.add('hidden');
            }
        }

        private async search(keyword: string): Promise<SearchResult[]> {
            if (!window.pagefind) {
                console.error('Pagefind is not loaded yet');
                return [];
            }

            const ret = await window.pagefind.debouncedSearch(keyword);
            if (ret === null) {
                return [];
            } else {
                return await Promise.all(ret.results.map((item) => item.data()));
            }
        }

        private displaySearch(results: SearchResult[]): void {
            if (!this.$results) return;

            const resultsHTML = results.map(this.createResultHTML).join('');
            this.$results.innerHTML = resultsHTML;

            this.updateSearchResultsHeight();

            if (results.length === 0 && this.$input.value !== '') {
                this.$searchMessage.classList.remove('hidden');
            } else {
                this.$searchMessage.classList.add('hidden');
            }
        }

        private createResultHTML(post: SearchResult): string {
            const { url, title, excerpt } = post.sub_results[0];
            return `
            <div class="search-results-item w-full max-w-2xl mx-auto p-2">
                <a href="${url}" class="text-lg font-semibold">
                    <div class="flex items-start">
                        <div class="flex-shrink-0 self-center">
                            <svg width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M9.5 4a6.5 6.5 0 0 1 6.5 6.5c0 1.62-.59 3.1-1.57 4.23l5.65 5.65l-.71.71l-5.65-5.65A6.47 6.47 0 0 1 9.5 17A6.5 6.5 0 0 1 3 10.5A6.5 6.5 0 0 1 9.5 4m0 1A5.5 5.5 0 0 0 4 10.5A5.5 5.5 0 0 0 9.5 16a5.5 5.5 0 0 0 5.5-5.5A5.5 5.5 0 0 0 9.5 5"/></svg>
                        </div>
                        <div class="flex-grow pl-2">
                            <div class="flex flex-col space-y-2">
                                <div class="text-lg font-semibold">${title}</div>
                                <div class="text-gray-400 text-xs italic truncate max-w-[50%]">${url}</div>
                                <p class="text-sm text-gray-500 mt-2">${excerpt}</p>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
        `;
        }

        private updateSearchResultsHeight(): void {
            this.searchResultsHeight = {
                outer: this.$results.offsetHeight,
                scroll: this.$results.scrollHeight,
            };
        }

        private handleKeydown(e: KeyboardEvent): void {
            switch (e.key) {
                case 'Enter':
                    e.preventDefault(); // Prevent default form submission
                    this.handleEnterKey();
                    break;
                case 'ArrowUp':
                    this.handleArrowKey('up');
                    e.preventDefault();
                    break;
                case 'ArrowDown':
                    this.handleArrowKey('down');
                    e.preventDefault();
                    break;
            }
        }

        private handleEnterKey(): void {
            const activeLink = this.$results.querySelector(
                `.search-results-item.${this.classIsActive} a`
            ) as HTMLAnchorElement;
            if (activeLink) {
                activeLink.click();
                this.closeModals(); // Close the modal after selection
            }
        }

        private handleArrowKey(direction: 'up' | 'down'): void {
            const allSearchLinks = this.$results.querySelectorAll('.search-results-item');
            if (!allSearchLinks.length) return;

            let index = Array.from(allSearchLinks).findIndex((el) => el.classList.contains(this.classIsActive));
            index = direction === 'up' ? Math.max(0, index - 1) : (index + 1) % allSearchLinks.length;

            allSearchLinks.forEach((el) => el.classList.remove(this.classIsActive));
            allSearchLinks[index].classList.add(this.classIsActive);

            this.scrollToActiveResult(allSearchLinks[index] as HTMLElement, direction);
        }

        private scrollToActiveResult(activeElement: HTMLElement, direction: 'up' | 'down'): void {
            const { offsetTop } = activeElement;
            const { outer } = this.searchResultsHeight;
            let scrollPosition = 0;

            if (direction === 'down' && offsetTop > outer / 2) {
                scrollPosition = offsetTop - outer / 2;
            } else if (direction === 'up') {
                scrollPosition =
                    offsetTop < this.searchResultsHeight.scroll - outer / 2
                        ? offsetTop - outer / 2
                        : this.searchResultsHeight.scroll;
            }

            this.$results.scrollTo({ top: scrollPosition, behavior: 'smooth' });
        }
    }

    // Initialize the search module
    const initSearch = () => {
        new SearchModule();
    };

    // Wait for pagefind to be loaded before initializing the search module
    const waitForPagefind = () => {
        if (window.pagefind) {
            initSearch();
        } else {
            setTimeout(waitForPagefind, 100);
        }
    };

    document.addEventListener('astro:after-swap', waitForPagefind);
    waitForPagefind();
</script>

---
import { t } from '@utils/use-lang';
import { Icon } from 'astro-icon/components';
import { CONFIG } from '@config/config.ts';
import { PROCESS_ENV } from '@config/process-env';

type Props = Record<string, never>; // eslint-disable-line @typescript-eslint/no-unused-vars

const { SITE_URL } = PROCESS_ENV;
---

<span
    role="button"
    aria-label="Toggle Search"
    class="js-modal-button godo-tracking button is-white mr-2"
    data-target="modal-search"
    aria-haspopup="true"
    data-event-category="Header"
    data-event-action="Search"
    data-event-label="Click"
    data-event-non-interaction="true"
>
    <Icon name="fa6-solid:magnifying-glass" class="icon" />
</span>
<div id="modal-search" class="js-modal modal search fixed inset-0 z-50 flex flex-col flex-wrap items-center">
    {/* {!-- Bg --}} */}
    <div class="bg-modal js-modal-close absolute inset-0 bg-opacity-60"></div>

    {/* {!-- Close --} */}
    <div class="button is-dark is-circle js-modal-close z-3 absolute" style={{ top: `5px`, right: `5px` }}>
        <Icon name="fa6-solid:xmark" class="icon" />
    </div>

    <div class="modal-content z-2 pt-vw6 relative w-full max-w-2xl px-5 pb-5">
        <div class="search-wrap bg-blank rounded-md shadow-sm">
            {/* {!-- search form --} */}
            <form class="search-form flex w-full items-center px-3 text-base">
                <Icon name="fa6-solid:magnifying-glass" class="icon" />
                <input
                    id="search-field"
                    class="is-medium w-full"
                    type="text"
                    placeholder={`${t(`Search`)}...`}
                    aria-label="Search box"
                />
            </form>
            {/* {!-- show a message to the user if there is no post --} */}
            <span class="js-search-message search-message hidden p-2 text-sm leading-none text-gray-500"
                >{t(`No results found`)}</span
            >
            {/* {!-- Search results --} */}
            <div id="search-results" class="search-results mx-auto w-full leading-none"></div>
        </div>
        {/* {!-- showing the function keys --} */}
        <div class="mt-2 hidden justify-end text-xs leading-none text-white opacity-80 md:flex">
            <div class="">
                <span class="bg-orange inline-block rounded p-1">↑</span>&nbsp;<span
                    class="bg-orange inline-block rounded p-1">↓</span
                >&nbsp;{t(`Navigate up/down`)}
            </div>
            <div class="ml-3">
                <span class="bg-orange inline-block rounded p-1">Enter</span>&nbsp;{t(`Go to article`)}
            </div>
            <div class="ml-3">
                <span class="bg-orange inline-block rounded p-1">Esc</span>&nbsp;{t(`Close search`)}
            </div>
        </div>
    </div>
</div>

<script is:inline define:vars={{ scriptUrl: `/pagefind/pagefind.js` }}>
    async function loadPagefind() {
        const pagefind = await import(scriptUrl);
        await pagefind.options({
            excerptLength: 20,
            highlightParam: 'highlight',
        });
        pagefind.init();
        window.pagefind = pagefind;
        pagefind.search(''); // speed up the first search
    }
    document.addEventListener('astro:after-swap', loadPagefind);
    loadPagefind();
</script>

<script>
    // @ts-nocheck

    const initSearch = async () => {
        const $body = document.body;
        const $input = document.querySelector('#search-field');
        const $results = document.querySelector('#search-results');
        const $searchMessage = document.querySelector('.js-search-message');

        const classIsActive = `is-active`;
        const rootEl = document.documentElement;
        const documentBody = document.body;

        let allSearchLinksLength = 0;

        let searchResultsHeight = {
            outer: 0,
            scroll: 0,
        };

        // Show icon search in header
        document.querySelector('span[data-target=modal-search]').classList.remove('hidden');

        const displaySearch = async (results) => {
            // Active class to link search
            if (!$results) {
                return;
            }

            const resultsHTML = results
                .map(
                    (post) => `
                        <div class="search-results-item w-full max-w-2xl mx-auto p-2">
                            <a href=${post.sub_results[0].url} class="text-lg font-semibold">
                            <div class="flex items-start">
                                <div class="flex-shrink-0 self-center">
                                    <svg width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M9.5 4a6.5 6.5 0 0 1 6.5 6.5c0 1.62-.59 3.1-1.57 4.23l5.65 5.65l-.71.71l-5.65-5.65A6.47 6.47 0 0 1 9.5 17A6.5 6.5 0 0 1 3 10.5A6.5 6.5 0 0 1 9.5 4m0 1A5.5 5.5 0 0 0 4 10.5A5.5 5.5 0 0 0 9.5 16a5.5 5.5 0 0 0 5.5-5.5A5.5 5.5 0 0 0 9.5 5"/></svg>
                                </div>
                                <div class="flex-grow pl-2">
                                    <div class="flex flex-col space-y-2">

                                        <div class="text-lg font-semibold">
                                            ${post.sub_results[0].title}
                                        </div>
                                        <div class="text-gray-400 text-xs italic truncate max-w-[50%]">
                                            ${post.sub_results[0].url}
                                        </div>

                                        <p class="text-sm text-gray-500 mt-2">
                                        ${post.sub_results[0].excerpt}
                                        </p>
                                    </div>
                                </div>
                            </div>
                            </a>
                        </div>
                    `
                )
                .join('');

            $results.innerHTML = resultsHTML;

            searchResultActive();

            allSearchLinksLength = results.length;

            searchResultsHeight = {
                outer: $results.offsetHeight,
                scroll: $results.scrollHeight,
            };

            if (results.length === 0 && $input.value !== ``) {
                $searchMessage.classList.remove(`hidden`);
                $body.removeEventListener(`keydown`, mySearchKey);
            } else {
                $searchMessage.classList.add(`hidden`);
                $body.addEventListener(`keydown`, mySearchKey);
            }
        };

        /* when the Enter key is pressed
  /* ---------------------------------------------------------- */
        function enterKey() {
            const link = $results.querySelector(`.search-results-item.${classIsActive} a`);
            link && link.click(); // eslint-disable-line @typescript-eslint/no-unused-expressions
        }

        /* Appending the active class to the search link
  /* ---------------------------------------------------------- */
        function searchResultActive(index, upDown) {
            index = index || 0;
            upDown = upDown || 'up';

            const allSearchLinks = $results.querySelectorAll(`.search-results-item`);

            // Return if there are no results
            if (!allSearchLinks.length) return;

            // Remove All class Active
            allSearchLinks.forEach((element) => element.classList.remove(classIsActive));

            // Add class active
            allSearchLinks[index].classList.add(classIsActive);

            // Scroll for results box
            const linkOffSetTop = allSearchLinks[index].offsetTop;
            let scrollPosition = 0;

            upDown === 'down' && linkOffSetTop > searchResultsHeight.outer / 2 // eslint-disable-line @typescript-eslint/no-unused-expressions
                ? (scrollPosition = linkOffSetTop - searchResultsHeight.outer / 2)
                : upDown === 'up' &&
                  (scrollPosition =
                      linkOffSetTop < searchResultsHeight.scroll - searchResultsHeight.outer / 2
                          ? linkOffSetTop - searchResultsHeight.outer / 2
                          : searchResultsHeight.scroll);

            $results.scrollTo(0, scrollPosition);
        }

        /* Reacted to the up or down keys
  /* ---------------------------------------------------------- */
        function arrowKeyUpDown(keyNumber) {
            let upDown;
            let indexTheLink = 0;

            const resultActive = $results.querySelector(`.is-active`);

            if (resultActive) {
                indexTheLink = [].slice.call(resultActive.parentNode.children).indexOf(resultActive);
            }

            $input.blur();

            // 38 === UP
            if (keyNumber === 38) {
                upDown = 'up';

                if (indexTheLink <= 0) {
                    $input.focus();
                    indexTheLink = 0;
                } else {
                    indexTheLink -= 1;
                }
            } else {
                upDown = 'down';

                if (indexTheLink >= allSearchLinksLength - 1) {
                    indexTheLink = 0;
                } else {
                    indexTheLink += 1;
                }
            }

            searchResultActive(indexTheLink, upDown);
        }

        /* Adding functions to the keys
  /* ---------------------------------------------------------- */
        function mySearchKey(e) {
            const keyNumber = e.keyCode;

            /**
             * 38 => Up
             * 40 => down
             * 13 => enter
             **/

            if (keyNumber === 13) {
                $input.blur();
                enterKey();
            } else if (keyNumber === 38 || keyNumber === 40) {
                arrowKeyUpDown(keyNumber);
                e.preventDefault();
            }
        }

        /* Search
  /* ---------------------------------------------------------- */

        const search = async (keyword: string) => {
            const arr = [];
            const ret = await pagefind.debouncedSearch(keyword);
            try {
                for (const item of ret.results) {
                    arr.push(await item.data());
                }
            } catch (error) {
                console.log('🚀 ~ search ~ error:', error);
            }
            return arr;
        };

        $input.addEventListener('input', async function () {
            const query = $input.value;
            if (query) {
                // Trigger the search function
                const results = await search(query);
                // Display the search results
                displaySearch(results);
            } else {
                // Clear the results if the input is empty
                $results.innerHTML = '';
            }
        });

        /*  Toggle modal
  /* ---------------------------------------------------------- */
        const simplyModal = () => {
            const getAll = (selector, parent = document) =>
                Array.prototype.slice.call(parent.querySelectorAll(selector), 0);
            const $modals = getAll('.js-modal');
            const $modalButtons = getAll('.js-modal-button');
            const $modalCloses = getAll('.js-modal-close');

            // Modal Click Open
            if (!$modalButtons.length) return;
            $modalButtons.forEach(($el) => $el.addEventListener('click', () => openModal($el.dataset.target)));

            // Modal Click Close
            if (!$modalCloses.length) return;
            $modalCloses.forEach((el) => el.addEventListener('click', () => closeModals()));

            const openModal = (target) => {
                documentBody.classList.remove('has-menu');
                const $target = document.getElementById(target);
                rootEl.classList.add('overflow-hidden');
                $target.classList.add('is-active');

                if (target === 'modal-search') {
                    document.querySelector('#search-field').focus();
                }
            };

            const closeModals = () => {
                rootEl.classList.remove('overflow-hidden');
                $modals.forEach(($el) => $el.classList.remove('is-active'));
            };

            document.addEventListener('keydown', function (event) {
                const e = event || window.event;
                if (e.keyCode === 27) {
                    closeModals();
                    // closeDropdowns()
                }
            });
            document.addEventListener('astro:after-swap', closeModals);
        };

        simplyModal();
    };
    document.addEventListener('astro:after-swap', initSearch);
    initSearch();
</script>

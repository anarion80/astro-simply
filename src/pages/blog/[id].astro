---
import { getCollection } from 'astro:content';
import dynamic from 'astro:import';
import { getCustomTemplate } from '@utils/customTemplate';
import type { InferGetStaticPropsType } from 'astro';
import { getPost } from '@utils/post';
import type { Post as PostSchema } from 'src/schemas/post';
import { getPrevPost, getNextPost, getRelatedPosts } from '@utils/post';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).filter((post) => !post.data.draft);
    return posts.map((post) => ({
        params: { id: post.id },
        props: post,
    }));
}

export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { id } = Astro.params;

const post = await getPost(id);

const nextPost = await getNextPost(Astro.params.id);
const prevPost = await getPrevPost(Astro.params.id);
const relatedPosts = await getRelatedPosts(post?.id);

const isPost = true;
const postType = getCustomTemplate(post);

const CustomPage = await dynamic(postType);
---

<>
    {
        post && isPost && (
            <CustomPage
                post={post}
                nextPost={nextPost as PostSchema}
                prevPost={prevPost as PostSchema}
                relatedPosts={relatedPosts}
            />
        )
    }
</>

<script>
    import mediumZoom from 'medium-zoom/dist/pure';
    import 'medium-zoom/dist/style.css';

    const mediumZoomImg = () => {
        mediumZoom('.simply-zoom', {
            margin: 20,
            background: `hsla(0,0%,100%,.85)`,
        });
    };
    document.addEventListener('astro:page-load', mediumZoomImg);
</script>

<script>
    import { annotate, annotationGroup } from 'rough-notation';

    const annotateElements = () => {
        const notions = document.querySelectorAll('span[data-notion-identity]');
        const annotations = new Array(notions.length).fill(0).map((_, index) => {
            const node = notions[index] as HTMLSpanElement;
            const type = node.dataset.notionType;
            const color = node.dataset.notionColor;
            const strokeWidth = node.dataset.notionStrokewidth;
            return annotate(node, {
                type: (type as 'underline') ?? 'underline',
                color: color ?? 'red',
                animate: false,
                multiline: type === 'bracket' ? false : true,
                brackets: ['left', 'right'],
                strokeWidth: Number(strokeWidth) || 1.5,
            });
        });
        annotationGroup(annotations).show();
    };
    document.addEventListener('astro:after-swap', annotateElements);
    annotateElements();
</script>

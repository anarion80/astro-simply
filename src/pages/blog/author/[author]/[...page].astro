---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';
import Layout from '@layouts/Layout.astro';
import StoryGrid from '@components/story/StoryGrid.astro';
import Pagination from '@components/Pagination.astro';
import MediaCover from '@components/MediaCover.astro';
import { CONFIG } from '@config/config';
import MetaData from '@components/meta/MetaData.astro';
import { t } from '@utils/use-lang';
import { getAuthors, getPosts } from '@utils/post';
import type { Author } from 'src/schemas/author';
import { Image } from 'astro:assets';
import AvatarImage from '@assets/images/avatar.png';
import type { ImageMetadata } from 'astro';
import { Icon } from 'astro-icon/components';

export const getStaticPaths = (async ({ paginate }) => {
    const authors = await getAuthors();
    const posts = await getPosts();

    return authors.flatMap((author) => {
        const filteredPosts = posts.filter((post) => {
            return post.data.authors.map((author) => author.slug).includes(author.slug);
        });
        return paginate(filteredPosts, {
            params: { author: author.slug },
            props: { author },
            pageSize: CONFIG.postsPerPage,
        });
    });
}) satisfies GetStaticPaths;

export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, author } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/authors/*.{jpeg,jpg,png,gif,svg}');
const image = author.data.profile_image ? `/src${author.data.profile_image}` : undefined;
const authorImage = image ? await images[image]() : undefined;
---

<Layout footer={true} isPost={false} bodyClass="is-author has-cover is-head-transparent">
    <MetaData
        location={Astro.url.pathname}
        type="author"
        data={author as Author}
        title={author.data.name}
        slot="head"
    />
    <div class="simply-hero-cover author min-h-lg bg-dark relative flex items-center justify-center py-24 shadow">
        {/*{{!-- Featured Media - partials/components/media-cover.hbs --}} */}
        <MediaCover background={author.data.cover_image} hasGradient={true} altTitle={author.data.name} />
        <article class="z-3 container relative flex flex-col pt-16 text-center">
            {/*{!-- Author avatar --}*/}
            <figure class="author-avatar animated bounceInDown relative mx-auto">
                {
                    authorImage ? (
                        <Image
                            src={authorImage.default}
                            class="avatar is-100x100 rounded-full object-cover"
                            width="100"
                            height="100"
                            alt={t(`Hi! I'm`) + ' ' + author.data.name}
                        />
                    ) : (
                        <Image
                            src={AvatarImage}
                            class="avatar is-100x100 rounded-full object-cover"
                            alt={t(`Hi! I'm`) + ' ' + author.data.name}
                        />
                    )
                }
            </figure>

            {/*{!-- Author name --}*/}
            <h1 class="cover-title animated bounceIn underscore is-center mt-5 text-4xl text-white lg:text-5xl">
                {author.data.name}
            </h1>

            {/*{!-- author biography --}*/}
            {author.data.bio && <p class="cover-des mx-auto mb-8 max-w-3xl text-xl text-white">{author.data.bio}</p>}

            {/*{!-- Author (website - RSS) --}*/}
            <div class="author-meta buttons justify-center">
                {
                    author.data.social?.website && (
                        <a
                            href={author.data.social.website}
                            class="author-link button is-transparent"
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            <Icon name="fa6-solid:link" class="icon is-stroke" />
                            <span>{author.data.social.website}</span>
                        </a>
                    )
                }

                <a
                    href={`${CONFIG.siteUrl}/blog/author/${author.slug}/rss.xml`}
                    class="author-stats button is-transparent"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    <Icon name="fa6-solid:square-rss" class="icon" />
                    {
                        /* <span>{{plural ../pagination.total empty=(t "No posts") singular=(t "1 post") plural=(t "% posts")}}</span> */
                    }
                </a>
            </div>

            {/*{!-- Author Facebook and Twitter --}*/}
            <div class="author-follow buttons mt-8 justify-center">
                {
                    author.data.social?.facebook && (
                        <a
                            href={`https://www.facebook.com/${author.data.social.facebook.replace(/^\//, ``)}`}
                            title="Facebook"
                            class="button bg-facebook border-0 text-white hover:text-white"
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            <Icon name="fa6-brands:square-facebook" class="icon" />
                            <span>Facebook</span>
                        </a>
                    )
                }

                {
                    author.data.social?.twitter && (
                        <a
                            href={`https://x.com/${author.data.social.twitter.replace(/^@/, ``)}`}
                            title={`https://x.com/${author.data.social.twitter.replace(/^@/, ``)}`}
                            class="button bg-twitter border-0 text-white hover:text-white"
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            <Icon name="fa6-brands:square-x-twitter" class="icon" />
                            <span>X.com</span>
                        </a>
                    )
                }
            </div>
        </article>
    </div>
    <div class="site-post feed-entry-content px-4 py-12">
        <div class="max-w-1100 feed-entry-wrap mx-auto">
            <div class="row">
                {
                    page.data.map((item) => {
                        return (
                            <div class="col s12 m6 l4">
                                <StoryGrid post={item} imageSize={'small'} />
                            </div>
                        );
                    })
                }
            </div>
            <Pagination pageContext={page} />
        </div>
    </div>
</Layout>
